#!/usr/bin/python3

"""
This file contains test cases for the `say_my_name` function.
"""

import doctest
from io import StringIO
import sys
from contextlib import redirect_stdout

from say_my_name import say_my_name

# Test cases
test_cases = [
    # Test case 1: First name and last name provided
    {
        "input": ["John", "Smith"],
        "expected_output": "My name is John Smith\n"
    },
    # Test case 2: First name and last name provided
    {
        "input": ["Walter", "White"],
        "expected_output": "My name is Walter White\n"
    },
    # Test case 3: Only first name provided
    {
        "input": ["Bob"],
        "expected_output": "My name is Bob\n"
    },
    # Test case 4: Invalid input - first name as an integer
    {
        "input": [12, "White"],
        "expected_output": "TypeError: first_name must be a string\n"
    },
    # Test case 5: Invalid input - last name as a list
    {
        "input": ["John", [1, 2, 3]],
        "expected_output": "TypeError: last_name must be a string\n"
    },
]

# Run the test cases
for test_case in test_cases:
    input_args = test_case["input"]
    expected_output = test_case["expected_output"]

    # Redirect stdout to capture the output
    stdout = StringIO()
    with redirect_stdout(stdout):
        say_my_name(*input_args)

    # Get the captured output
    output = stdout.getvalue()

    # Compare the output with the expected output
    if output == expected_output:
        print("Test passed")
    else:
        print("Test failed")
        print(f"Input: {input_args}")
        print(f"Expected output: {expected_output.strip()}")
        print(f"Actual output: {output.strip()}")

# Run doctest to check the function against the provided examples
doctest.testmod()
